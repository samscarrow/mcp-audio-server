name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.4.0
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction
    
    - name: Run tests with coverage
      run: |
        poetry run pytest --cov=mcp_audio_server --cov-report=xml --cov-fail-under=90
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build:
    name: Build and Push Container
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/mcp-audio-server:latest
          ghcr.io/${{ github.repository_owner }}/mcp-audio-server:${{ steps.get_version.outputs.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docs:
    name: Build Documentation
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.4.0
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction
    
    - name: Build documentation
      run: |
        poetry run mkdocs build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  release:
    name: Create Release
    needs: [build, docs]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
      
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Extract release notes
      id: extract_release_notes
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        # Extract release notes from CHANGELOG.md
        RELEASE_NOTES=$(awk -v version="## \\[$VERSION\\]" '/^## \[[0-9]+\.[0-9]+\.[0-9]+\]/ {p=0} $0 ~ version {p=1; next} p' CHANGELOG.md)
        # Escape newlines for GitHub Actions
        RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
        echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_OUTPUT
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          # MCP Audio Server ${{ steps.get_version.outputs.VERSION }}
          
          ${{ steps.extract_release_notes.outputs.RELEASE_NOTES }}
          
          ## Docker Images
          
          ```bash
          docker pull ghcr.io/${{ github.repository_owner }}/mcp-audio-server:${{ steps.get_version.outputs.VERSION }}
          ```
          
          ## Documentation
          
          Full documentation is available at: https://${{ github.repository_owner }}.github.io/mcp-audio-server/
        draft: false
        prerelease: false
